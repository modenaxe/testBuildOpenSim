name: Main

on: push

jobs:
  windows:
    name: Windows

    runs-on: windows-latest

    steps:

    - name: Checkout opensim-core main
      uses: actions/checkout@v3
      with:
         repository: opensim-org/opensim-core
         path: 'opensim-core'

    - name: Install Python packages
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install numpy
      run: python3 -m pip install numpy==1.26

    - name: Install SWIG
      run: |
        choco install swig --version 4.1.1 --yes --limit-output --allow-downgrade
        swig -swiglib

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: ~/opensim_dependencies_install
        # Every time a cache is created, it's stored with this key.
        # In subsequent runs, if the key matches the key of an existing cache,
        # then the cache is used. We chose for this key to depend on the
        # operating system and a hash of the hashes of all files in the
        # dependencies directory (non-recursive).
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}

    - name: Build dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        echo $env:GITHUB_WORKSPACE\\build_deps
        mkdir $env:GITHUB_WORKSPACE\\build_deps
        chdir $env:GITHUB_WORKSPACE\\build_deps
        # /W0 disables warnings.
        # https://msdn.microsoft.com/en-us/library/19z1t1wy.aspx
        # TODO: CMake provides /W3, which overrides our /W0
        cmake -E env CXXFLAGS="/W0" 
        cmake $env:GITHUB_WORKSPACE/dependencies -LAH -G"Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install -DSUPERBUILD_ezc3d=ON -DOPENSIM_WITH_TROPTER=ON -DOPENSIM_WITH_CASADI=ON
        cmake --build . --config Release -- /maxcpucount:4

    - name: Configure opensim-core
      id: configure
      run: |
        mkdir $env:GITHUB_WORKSPACE\\build
        chdir $env:GITHUB_WORKSPACE\\build
        # TODO: Can remove /WX when we use that in CMakeLists.txt.
        # Set the CXXFLAGS environment variable to turn warnings into errors.
        # Skip timing test section included by default.
        cmake -E env CXXFLAGS="/WX -DSKIP_TIMING" cmake $env:GITHUB_WORKSPACE -LAH -G"Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX=~/opensim-core-install -DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install -DOPENSIM_C3D_PARSER=ezc3d -DBUILD_PYTHON_WRAPPING=on
        $env:match = cmake -L . | Select-String -Pattern OPENSIM_QUALIFIED_VERSION
        $version = $env:match.split('=')[1]
        echo $version
        echo "VERSION=$version" >> $GITHUB_ENV
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Build opensim-core
      # Install now to avoid building bindings twice (TODO: issue when using Visual Studio 2019, is this an issue too in Visual Studio 2022?).
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        cmake --build . --config Release --target doxygen -- /maxcpucount:4
        cmake --build . --config Release --target install -- /maxcpucount:4

    # - name: Test opensim-core
    #   run: |
    #     chdir $env:GITHUB_WORKSPACE\\build
    #     ctest --parallel 4 --output-on-failure --build-config Release -E Java_*

    # - name: Install opensim-core
    #   # TODO: This is where we wish to do the installing, but it's done above for now.
    #   run: |
    #     chdir $env:GITHUB_WORKSPACE\\build
    #     chdir $env:GITHUB_WORKSPACE
    #     Copy-Item -Path "~/opensim-core-install" -Destination "opensim-core-${{ github.event.pull_request.base.ref }}" -Recurse
    #     7z a "opensim-core-${{ github.event.pull_request.base.ref }}.zip" "opensim-core-${{ github.event.pull_request.base.ref }}"

    # - name: Test Python bindings
    #   run: |
    #     echo "PYTHONPATH= $env:USERPROFILE/opensim-core-install/bin">> $GITHUB_ENV
    #     # Move to the installed location of the python package.
    #     cd ~/opensim-core-install/sdk/python
    #     # Run python tests.
    #     python -m unittest discover --start-directory opensim/tests --verbose

    - name: Upload opensim-core
      uses: actions/upload-artifact@v4
      with:
        name: opensim-core-${{ github.event.pull_request.base.ref }}-win
        path: opensim-core-${{ github.event.pull_request.base.ref }}.zip
