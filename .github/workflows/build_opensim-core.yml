name: Main

on: 
    push:
    schedule:
      - cron: '0 0 * * *'

jobs:
    build:
        name: Windows
        runs-on: windows-2022
        defaults:
            run:
                shell: powershell
        
        strategy:
            matrix:
                # os: [windows-2022]
                include:
                
                  - python_version: '3.12'
                    numpy_version: '1.*'
                    label: 'py312-np1'
                    
                  - python_version: '3.13'
                    numpy_version: '2.*'
                    label: 'py313-np2'
        
        steps:
        
          # - name: Install SWIG
            # run: |
                # choco install swig --version 4.1.1 --yes --limit-output --allow-downgrade
                # swig -swiglib
        
          - name: Install Python ${{ matrix.python_version }}
            uses: actions/setup-python@v4
            with:
                python-version: ${{ matrix.python_version }}
        
          - name: Install NumPy 
            run: |
                python -m pip install --upgrade pip
                python -m pip install numpy==${{ matrix.numpy_version }} setuptools wheel
        
          # - name: Set up JDK 1.8
            # uses: actions/setup-java@v3
            # with:
                # distribution: 'temurin'
                # java-version: 8
        
          # - name: Install Netbeans 12.3
            # run: |
                # (New-Object System.Net.WebClient).DownloadFile("https://archive.apache.org/dist/netbeans/netbeans/12.3/Apache-NetBeans-12.3-bin-windows-x64.exe", "Apache-NetBeans-12.3-bin-windows-x64.exe")
                # $expectedHash = "0695d87d9c72dcf3738672ba83eb273dda02066fa5eee80896cb6ccf79175840367a13d22ab3cb9838dffaa9a219dd1f73aee0e27c085e5310da2e3bbbc92b2c"
                # $hashFromFile = Get-FileHash -Algorithm SHA512 -Path .\Apache-NetBeans-12.3-bin-windows-x64.exe
                # if (($hashFromFile.Hash) -ne ($expectedHash)) { Write-Error "Hash doesn't match." }
                # .\Apache-NetBeans-12.3-bin-windows-x64.exe --silent | Out-Null # This installer is gregarious.
                # echo "ANT_HOME=C:\\Program Files\\NetBeans-12.0\\netbeans\\extide\\ant" >> $GITHUB_ENV
        
          - name: Checkout the current repository
            uses: actions/checkout@v4
        
          - name: Checkout opensim-core repository
            uses: actions/checkout@v4
            with:
                repository: opensim-org/opensim-core
                path: 'opensim-core'
                # ref: 'main'
        
          - name: Checkout opensim-models Geometry
            uses: actions/checkout@v4
            with:
                repository: opensim-org/opensim-models
                path: 'opensim-models'
                sparse-checkout: 'Geometry'
                # sparse-checkout-cone-mode: false
        
          - name: Paths
            run: |
                dir $env:GITHUB_WORKSPACE
                dir $env:GITHUB_WORKSPACE/opensim-core
                dir $env:GITHUB_WORKSPACE/opensim-models
        
          - name: Cache opensim-core dependencies
            id: cache-dependencies
            uses: actions/cache@v3
            with:
                path: ~/opensim_dependencies_install
                key: ${{ runner.os }}-dependencies-${{ hashFiles('opensim-core/dependencies/*') }}
        
          - name: Build opensim-core dependencies
            # if: steps.cache-dependencies.outputs.cache-hit != 'true'
            run: |
                mkdir $env:GITHUB_WORKSPACE\\build_deps
                chdir $env:GITHUB_WORKSPACE\\build_deps
                
                $env:CXXFLAGS = "/W0"
                cmake $env:GITHUB_WORKSPACE/opensim-core/dependencies `
                    -G "Visual Studio 17 2022" -A x64 `
                    -DSUPERBUILD_ezc3d=ON `
                    -DOPENSIM_WITH_CASADI=ON `
                    -DOPENSIM_WITH_TROPTER=ON `
                    -DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install
                
                cmake --build . --config Release -j4
        
          - name: Obtain opensim-core commit
            id: opensim-core-commit
            run: |
                cd opensim-core
                $opensim_core_commit=(git rev-parse HEAD)
                echo "hash=$opensim_core_commit" >> $GITHUB_OUTPUT
                echo $opensim_core_commit
          
          - name: Cache opensim-core
            id: cache-core
            uses: actions/cache@v3
            with:
                path: ~/opensim-core-install
                key: ${{ runner.os }}-${{ steps.opensim-core-commit.outputs.hash }}
        
          - name: Build opensim-core
            # if: steps.cache-core.outputs.cache-hit != 'true'
            id: build
            run: |
                mkdir $env:GITHUB_WORKSPACE\\build
                chdir $env:GITHUB_WORKSPACE\\build
                
                $env:CXXFLAGS = "/W0"
                cmake $env:GITHUB_WORKSPACE/opensim-core `
                    -G "Visual Studio 17 2022" -A x64 `
                    -DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install `
                    -DBUILD_JAVA_WRAPPING=OFF `
                    -DBUILD_PYTHON_WRAPPING=ON `
                    -DOPENSIM_WITH_CASADI=ON `
                    -DOPENSIM_WITH_TROPTER=ON `
                    -DOPENSIM_C3D_PARSER=ezc3d `
                    -DBUILD_TESTING=OFF `
                    -DCMAKE_INSTALL_PREFIX=~/opensim-core-install
                
                $env:match = cmake -L . | Select-String -Pattern OPENSIM_QUALIFIED_VERSION
                $OPENSIM_VERSION = $env:match.split('=')[1]
                echo "OPENSIM_VERSION=$OPENSIM_VERSION" >> $env:GITHUB_ENV
            
                cmake -L -N .
                cmake --build . --config Release --target install -j4
        
          - name: Version
            run: echo ${{ env.OPENSIM_VERSION }}
        
          - name: Include Geometry folder
            run: |
                dir .
                del ~/opensim-core-install/sdk/Python/setup.py
                del ~/opensim-core-install/sdk/Python/opensim/__init__.py
                move $env:GITHUB_WORKSPACE/setup.py ~/opensim-core-install/sdk/Python
                move $env:GITHUB_WORKSPACE/__init__.py ~/opensim-core-install/sdk/Python/opensim
                move $env:GITHUB_WORKSPACE/opensim-models/Geometry ~/opensim-core-install
        
          - name: Build wheel file
            run: |
                chdir ~/opensim-core-install/sdk/Python
                python setup.py bdist_wheel
        
          - name: Check files
            run: |
                dir ~/opensim-core-install
                dir ~/opensim-core-install/sdk/Python
                dir ~/opensim-core-install/sdk/Python/opensim
        
          # - name: Update submodules
            # run: git submodule update --init --recursive -- opensim-models opensim-visualizer Gui/opensim/threejs
        
          # - name: Build GUI
            # id: build-gui
            # run: |
                # mkdir build
                # cd build
                # cmake ../ -G"Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH=~/opensim-core-install -DANT_ARGS="-Dnbplatform.default.netbeans.dest.dir=C:/Program Files/NetBeans-12.3/netbeans;-Dnbplatform.default.harness.dir=C:/Program Files/NetBeans-12.3/netbeans/harness"
                # cmake --build . --target CopyOpenSimCore --config Release
                # cmake --build . --target CopyModels --config Release
                # cmake --build . --target PrepareInstaller --config Release
                # cmake --build . --target CopyJRE --config Release
                # cmake --build . --target CopyVisualizer --config Release
                Read the value of the cache variable storing the GUI build version.
                # $env:match = cmake -L . | Select-String -Pattern OPENSIMGUI_BUILD_VERSION
                # $VERSION = $env:match.split('=')[1]
                # echo $VERSION
                # echo "name=VERSION::$VERSION" >> $GITHUB_ENV
                # echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        
          # - name: Build GUI installer
            # run: |
                # cd Gui/opensim/dist/installer
                # makensis.exe make_installer.nsi
                # mv OpenSim-${{ steps.build-gui.outputs.version }}-win64.exe $env:GITHUB_WORKSPACE
        
          # - name: Upload GUI installer
            # uses: actions/upload-artifact@v3
            # with:
                # name: OpenSim-${{ steps.build-gui.outputs.version }}-win64
                # path: OpenSim-${{ steps.build-gui.outputs.version }}-win64.exe
        
          - name: Upload opensim-core
            uses: actions/upload-artifact@v4
            with:
                name: opensim-core-win64-py${{ matrix.label }}
                path: ~/opensim-core-install/sdk/Python/dist/*.whl
                compression-level: 0
